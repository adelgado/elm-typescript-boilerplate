var _user$project$Main$virtualKeyboard = function (model) {
	var velocityText = A2(
		_elm_lang$core$Basics_ops['++'],
		'Velocity is ',
		_elm_lang$core$Basics$toString(
			function (_) {
				return _.velocity;
			}(model)));
	var endOctave = _elm_lang$core$Basics$toString(
		A2(
			F2(
				function (x, y) {
					return x + y;
				}),
			1,
			function (_) {
				return _.octave;
			}(model)));
	var startOctave = _elm_lang$core$Basics$toString(
		function (_) {
			return _.octave;
		}(model));
	var octaveText = A2(
		_elm_lang$core$Basics_ops['++'],
		'Octave is C',
		A2(
			_elm_lang$core$Basics_ops['++'],
			startOctave,
			A2(_elm_lang$core$Basics_ops['++'], ' to C', endOctave)));
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('virtual-keyboard')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(octaveText)
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(velocityText)
					]))
			]));
};
var _user$project$Main$view = function (model) {
	return _user$project$Main$virtualKeyboard(model);
};
var _user$project$Main$octaveUp = function (model) {
	return _elm_lang$core$Native_Utils.update(
		model,
		{
			octave: A2(
				_elm_lang$core$Basics$min,
				8,
				A2(
					F2(
						function (x, y) {
							return x + y;
						}),
					1,
					function (_) {
						return _.octave;
					}(model)))
		});
};
var _user$project$Main$octaveDown = function (model) {
	return _elm_lang$core$Native_Utils.update(
		model,
		{
			octave: A2(
				_elm_lang$core$Basics$max,
				-2,
				function (_) {
					return _.octave;
				}(model) - 1)
		});
};
var _user$project$Main$velocityUp = function (model) {
	var vel = function (_) {
		return _.velocity;
	}(model);
	return _elm_lang$core$Native_Utils.update(
		model,
		{
			velocity: _elm_lang$core$Native_Utils.eq(vel, 1) ? 20 : ((_elm_lang$core$Native_Utils.cmp(vel, 120) > -1) ? 127 : (vel + 20))
		});
};
var _user$project$Main$velocityDown = function (model) {
	var vel = function (_) {
		return _.velocity;
	}(model);
	return _elm_lang$core$Native_Utils.update(
		model,
		{
			velocity: (_elm_lang$core$Native_Utils.cmp(vel, 40) < 0) ? 1 : (_elm_lang$core$Native_Utils.eq(vel, 127) ? 120 : (vel - 20))
		});
};
var _user$project$Main$update = F2(
	function (msg, model) {
		return A2(
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			function () {
				var _p0 = msg;
				switch (_p0.ctor) {
					case 'NoOp':
						return model;
					case 'OctaveDown':
						return _user$project$Main$octaveDown(model);
					case 'OctaveUp':
						return _user$project$Main$octaveUp(model);
					case 'VelocityDown':
						return _user$project$Main$velocityDown(model);
					default:
						return _user$project$Main$velocityUp(model);
				}
			}(),
			_elm_lang$core$Platform_Cmd$none);
	});
var _user$project$Main$init = A2(
	F2(
		function (v0, v1) {
			return {ctor: '_Tuple2', _0: v0, _1: v1};
		}),
	{octave: 3, velocity: 100},
	_elm_lang$core$Platform_Cmd$none);
var _user$project$Main$Model = F2(
	function (a, b) {
		return {octave: a, velocity: b};
	});
var _user$project$Main$VelocityDown = {ctor: 'VelocityDown'};
var _user$project$Main$VelocityUp = {ctor: 'VelocityUp'};
var _user$project$Main$OctaveDown = {ctor: 'OctaveDown'};
var _user$project$Main$OctaveUp = {ctor: 'OctaveUp'};
var _user$project$Main$NoOp = {ctor: 'NoOp'};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$keyboard$Keyboard$presses(
		function (keyCode) {
			var symbol = _elm_lang$core$Char$toLower(
				_elm_lang$core$Char$fromCode(keyCode));
			return _elm_lang$core$Native_Utils.eq(
				symbol,
				_elm_lang$core$Native_Utils.chr('z')) ? _user$project$Main$OctaveDown : (_elm_lang$core$Native_Utils.eq(
				symbol,
				_elm_lang$core$Native_Utils.chr('x')) ? _user$project$Main$OctaveUp : (_elm_lang$core$Native_Utils.eq(
				symbol,
				_elm_lang$core$Native_Utils.chr('c')) ? _user$project$Main$VelocityDown : (_elm_lang$core$Native_Utils.eq(
				symbol,
				_elm_lang$core$Native_Utils.chr('v')) ? _user$project$Main$VelocityUp : _user$project$Main$NoOp)));
		});
};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})
};
